package com.tabulaw.service.entity;

import com.tabulaw.model.*;
import com.thoughtworks.xstream.XStream;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collection;
import java.util.List;

public class Dao {
    private Connection conn=null;
    private PreparedStatement ps=null;
    private XStream xs;

    public Dao() {
        xs = new XStream();
        xs.alias("role", User.Role.class);
    }

    public String toXML(Object obj)
    {
        return xs.toXML(obj);
    }

    public PreparedStatement getPreparedStatement(String query, int autoGeneratedKeys) throws SQLException {
        try {

            // re-use connection, if existing
            if (conn==null) {
                Context initContext = new InitialContext();
                DataSource ds = (DataSource) initContext.lookup("java:/comp/env/jdbc/pgsql");
                conn = ds.getConnection();
            }


            // close and re-create PreparedStatement if already exists. This allow chains of getPreparedStatement
            if (ps!=null)
                ps.close();

            ps = conn.prepareStatement(query, autoGeneratedKeys);

            return ps;
        } catch (NamingException ex) {
            throw new IllegalStateException(ex);
        }
    }

    public void cleanUp() {
        if (ps != null)
            try {
                ps.close();
                ps = null;
            } catch (Exception e) {
            }
        if (conn != null)
            try {
                conn.close();
                conn=null;
            } catch (Exception e) {
            }
    }

    public Quote loadQuoteWithDocRefWithCaseRef(ResultSet rs)
    {
        try {
            Quote ret = new Quote();
            ret.setId(rs.getString("quote_id"));
            ret.setEndPage(rs.getInt("quote_endpage"));
            ret.setDocument(loadDocRefWithCaseRef(rs));
            ret.setQuote(rs.getString("quote_quote"));
            ret.setSerializedMark(rs.getString("quote_serializedmark"));
            ret.setStartPage(rs.getInt("quote_startpage"));
            return ret;
        } catch (SQLException ex) {
            throw new IllegalStateException(ex);
        }

    }
    public QuoteBundle loadQuoteBundle(ResultSet rs)
    {
        try {
            QuoteBundle ret = new QuoteBundle();
            ret.setId(rs.getString("quotebundle_id"));
            ret.setName(rs.getString("quotebundle_name"));
            ret.setDescription(rs.getString("quotebundle_description"));
            return ret;
        } catch (SQLException ex) {
            throw new IllegalStateException(ex);
        }
    }

    public BundleUserBinding loadBundleUserBinding(ResultSet rs)
    {
        try {
            BundleUserBinding ret = new BundleUserBinding();
            ret.setId(rs.getString("permission_id"));
            ret.setUserId(rs.getString("permission_user"));
            ret.setBundleId(rs.getString("permission_quotebundle"));
            return ret;
        } catch (SQLException ex) {
            throw new IllegalStateException(ex);
        }
    }

    public UserState loadUserState(ResultSet rs)
    {
        try {
            UserState ret = new UserState();
            ret.setId(rs.getString("userstate_id"));
            String currentQuoteBundleId = rs.getString("userstate_quotebundle");
            if (currentQuoteBundleId!=null) {
            	ret.setCurrentQuoteBundleId(currentQuoteBundleId);
            }
            ret.setUserId(rs.getString("userstate_user"));
            ret.setAllQuoteBundleId(rs.getString("userstate_allquotebundle"));
            return ret;
        } catch (SQLException ex) {
            throw new IllegalStateException(ex);
        }
    }

    public DocRef loadDocRefWithCaseRef(ResultSet rs)
    {
        try {
            DocRef ret = new DocRef();
            ret.setId(rs.getString("doc_id"));
            ret.setTitle(rs.getString("doc_title"));
            ret.setDate(rs.getDate("doc_date"));
            ret.setReferenceDoc(rs.getBoolean("doc_referencedoc"));

            String docCaseRef = rs.getString("doc_caseref");
            if (docCaseRef!=null && !docCaseRef.isEmpty()) {
                CaseRef caseRef = new CaseRef();
                caseRef.setId(rs.getString("caseref_id"));
                caseRef.setCourt(rs.getString("caseref_court"));
                caseRef.setDocLoc(rs.getString("caseref_docloc"));
                caseRef.setFirstPageNumber(rs.getInt("caseref_firstpagenumber"));
                caseRef.setLastPageNumber(rs.getInt("caseref_lastpagenumber"));
                caseRef.setParties(rs.getString("caseref_parties"));
                caseRef.setReftoken(rs.getString("caseref_reftoken"));
                caseRef.setUrl(rs.getString("caseref_url"));
                caseRef.setYear(rs.getInt("caseref_year"));
                ret.setReference(caseRef);
            }
            return ret;
        } catch (SQLException ex) {
            throw new IllegalStateException(ex);
        }
    }

    public DocContent loadDocContent(ResultSet rs)
    {
        try {
            DocContent ret = new DocContent();
            ret.setId(rs.getString("doc_id"));
            ret.setHtmlContent(rs.getString("doc_htmlcontent"));
            ret.setPagesXPath((List<int[]>) xs.fromXML(rs.getString("doc_pagesxpath")));
            ret.setFirstPageNumber(rs.getInt("doc_firstpagenumber"));
            return ret;
        } catch (SQLException ex) {
            throw new IllegalStateException(ex);
        }
    }


    public User loadUser(ResultSet rs) {
        try {
            User ret = new User();
            ret.setId(rs.getString("user_id"));
            // skip AppFeatures
            ret.setEmailAddress(rs.getString("user_emailaddress"));
            ret.setEnabled(rs.getBoolean("user_enabled"));
            ret.setExpires(rs.getDate("user_expires"));
            ret.setLocked(rs.getBoolean("user_locked"));
            ret.setName(rs.getString("user_name"));
            // skip OAuthParameters
            // skip OAuthParametersExtra
            ret.setPassword(rs.getString("user_password"));
            ret.setRoles((Collection)xs.fromXML(rs.getString("user_roles")));

            return ret;
        } catch (SQLException ex) {
            throw new IllegalStateException(ex);
        }
    }
}
